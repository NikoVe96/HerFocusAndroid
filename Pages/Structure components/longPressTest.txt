import React, { useCallback, useContext, useEffect, useState } from 'react';
import { View, Text, SafeAreaView, TouchableOpacity, ScrollView, StyleSheet, TextInput, Dimensions } from 'react-native';
import BouncyCheckbox from 'react-native-bouncy-checkbox';
import { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';
import { faStopwatch, faFilter } from '@fortawesome/free-solid-svg-icons';
import { useFocusEffect, useTheme } from '@react-navigation/native';
import DropDownPicker from 'react-native-dropdown-picker';
import { getDayEvents, getAllDayEvents } from './DayEvents';
import { LightenDarkenColor } from './ColorChange';
import Parse from 'parse/react-native';
import EmojiPicker from "rn-emoji-picker"
import { emojis } from "rn-emoji-picker/dist/data"
import DatePicker from "react-native-date-picker";
import Modal from 'react-native-modal';

const TaskSorter = ({
    date,
    selectedWeekDays
}) => {

    const [open, setOpen] = useState(false);
    const [sorting, setSorting] = useState('type');
    const [sortingOptions, setSortingOptions] = useState([
        { label: 'Tid', value: 'tid' },
        { label: 'Type', value: 'type' }
    ]);
    const [allDayArray, setAllDayArray] = useState([]);
    const [dayTasksArray, setDayTasksArray] = useState([]);
    const [ID, setID] = useState('');
    const [username, setUsername] = useState('');
    const [tasksArray, setTasksArray] = useState([]);
    const [eventsArray, setEventsArray] = useState([]);
    const [routinesArray, setRoutinesArray] = useState([]);
    const [editModalVisible, setEditModalVisible] = useState(false);
    const [editItem, setEditItem] = useState();
    const [itemName, setItemName] = useState('');
    const [itemDate, setItemDate] = useState('');
    const [itemStartTime, setStartTime] = useState('');
    const [itemEndTime, setEndTime] = useState('');
    const [itemColor, setItemColor] = useState('');
    const [recent, setRecent] = useState([]);
    const [emojiModalVisible, setEmojiModalVisible] = useState(false);
    const [emoji, setEmoji] = useState();
    const [description, setDescription] = useState('');
    const [isDatePickerVisible, setDatePickerVisibility] = useState(false);
    const [isStartTimePickerVisible, setStartTimePickerVisibility] = useState(false);
    const [isEndTimePickerVisible, setEndTimePickerVisibility] = useState(false);
    const { width, height, colors } = useTheme();
    const scaleFactor = Math.min(width / 375, height / 667);
    const today = new Date;
    const currentDate = today.toISOString().slice(0, 10);

    useEffect(() => {
        async function getCurrentUser() {
            if (username === '') {
                const currentUser = await Parse.User.currentAsync();
                if (currentUser !== null) {
                    setUsername(currentUser.getUsername());
                    setID(currentUser.id);
                }
            }
        }

        getCurrentUser();
    }, []);

    useFocusEffect(
        useCallback(() => {
            async function fetchEvents() {
                const formattedDate = formatDate(date);
                if (!formattedDate) {
                    console.error('Invalid date format:', date);
                    return;
                }
                try {
                    const dayEvents = await getDayEvents(formattedDate, ID);
                    const allDayEvents = await getAllDayEvents(formattedDate, ID);
                    setDayTasksArray(dayEvents.allEvents);
                    setAllDayArray(allDayEvents);
                    setTasksArray(dayEvents.tasks);
                    setEventsArray(dayEvents.events);
                    setRoutinesArray(dayEvents.routines);
                } catch (error) {
                    console.error('Error fetching events:', error);
                }
            }
            fetchEvents();
        }, [date, ID])
    );

    const formatDate = (date) => {
        if (date instanceof Date && date.getFullYear) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
        if (date.year && date.month && date.day) {
            return `${date.year}-${String(date.month).padStart(2, '0')}-${String(date.day).padStart(2, '0')}`;
        }
        return '';
    };

    const editModal = (item) => {
        console.log('Editing item:', item);
        if (!item || typeof item.get !== 'function') {
            console.error('Invalid item passed to editModal');
            return;
        }
        setEditItem(item);
        setEditModalVisible(true);
        setItemName(item.get('name'));
        setItemColor(item.get('color'));
        setEmoji(item.get('emoji'));
        setItemDate(item.get('date'));
        setStartTime(item.get('startTime'));
        setEndTime(item.get('endTime'));
        setDescription(item.get('description'));
    }

    const edit = async function () {
        console.log('editable item: ' + editItem);
        let oldItem;

        if (editItem.get('type') == 'task') {
            oldItem = new Parse.Object('Task');

        } else if (editItem.get('type') == 'event') {
            oldItem = new Parse.Object('Event');

        } else {
            oldItem = new Parse.Object('Routine');
        }

        oldItem.set('objectId', editItem.id);

        try {
            oldItem.set('name', itemName);
            oldItem.set('color', itemColor);
            oldItem.set('emoji', emoji);
            oldItem.set('date', itemDate);
            oldItem.set('startTime', itemStartTime);
            oldItem.set('endTime', itemEndTime);
            oldItem.set('description', description);

            await oldItem.save();
            Alert.alert('Dine Ã¦ndringer er gemt!')
            setEditModalVisible(false);
            dayTasks(chosenDate);
            console.log('Success: item saved')
        } catch (error) {
            console.log('Error editing: ', error);
            Alert.alert('Hovsa! Der skete en fejl')
        }
    }

    const completeTask = async (task) => {
        const isCompleted = task.get('completed');
        console.log(task.get('completed'))
        task.set('completed', !isCompleted);
        await task.save();

        getDayEvents(chosenDate);
    }

    function sortEventView() {
        if (sorting == 'tid') {
            return (
                <View>
                    {
                        dayTasksArray.length == 0 && allDayArray.length == 0 ?
                            <View style={{ marginHorizontal: 15, alignItems: 'center', marginVertical: '25%' }}>
                                <Text style={{ textAlign: 'center', fontSize: 18, color: colors.darkText }}>Der er ingen opgaver eller begivenheder i din kalender i dag!</Text>
                            </View>
                            :
                            <View>
                                <View>
                                    {allDayArray.map((item, index) => (
                                        <TouchableOpacity
                                            onLongPress={() => editModal(item)}
                                            key={index}
                                            style={{ alignItems: 'center', borderWidth: 1, padding: 5, marginVertical: 5, marginHorizontal: 15, flexDirection: 'row', backgroundColor: item.get('color'), borderRadius: 10, borderColor: item.get('color'), }}>
                                            <Text style={{ fontSize: 20, marginRight: 10, marginLeft: 2, color: colors.lightText }}>{item.get('emoji')}</Text>
                                            <Text style={{ fontSize: 18, paddingRight: 5, color: colors.lightText }}>{item.get('name')}</Text>
                                        </TouchableOpacity>
                                    ))}
                                    {allDayArray.length == 0 ?
                                        <View />
                                        :
                                        <View style={{ borderWidth: 1, marginHorizontal: 15, marginVertical: 20, backgroundColor: colors.darkText, width: 250, alignSelf: 'center', borderColor: colors.dark, borderRadius: 10 }}></View>

                                    }
                                </View>
                                <View style={{ marginBottom: '5%' }}>
                                    {dayTasksArray.map((item, index) => (
                                        <View key={index} style={{ flexDirection: 'row' }}>
                                            {item.get('type') == 'task' ?
                                                <BouncyCheckbox
                                                    size={30}
                                                    fillColor={colors.darkText}
                                                    unfillColor={colors.dark}
                                                    iconStyle={{ elevation: 5, }}
                                                    innerIconStyle={{ borderWidth: 15, borderColor: item.get('color') }}
                                                    textStyle={{ fontFamily: "JosefinSans-Regular" }}
                                                    onPress={() => { completeTask(item) }}
                                                    isChecked={item.get('completed')}
                                                    style={{ marginHorizontal: 10, flex: 0.5 }}
                                                />
                                                : <View style={{ marginLeft: '11%' }} />
                                            }
                                            {item.get('type') == 'routine' ?
                                                <TouchableOpacity
                                                    onLongPress={() => editModal(item)}
                                                    style={{ flex: 1, alignItems: 'center', borderWidth: 1, marginVertical: 5, marginHorizontal: 15, flexDirection: 'row', backgroundColor: item.get('color'), borderRadius: 10, borderColor: item.get('color'), elevation: 5 }}>
                                                    <AccordionItem
                                                        title={item.get('name')}
                                                        time={item.get('startTime') + ' - ' + item.get('endTime')}
                                                        icon={null}
                                                        emoji={item.get('emoji')}
                                                        titleStyle={{ fontSize: 18, color: 'black', fontWeight: 'normal' }}
                                                        emojiStyle={{ fontSize: 22 }}
                                                        toggleStyle={'black'}>
                                                        {item.get('routineSteps').map((step, index) => (
                                                            <View key={index} style={{ flexDirection: 'row' }}>
                                                                <View style={{ justifyContent: 'center' }}>
                                                                    <BouncyCheckbox
                                                                        size={30}
                                                                        fillColor={colors.darkText}
                                                                        unfillColor={colors.dark}
                                                                        iconStyle={{ elevation: 5, }}
                                                                        innerIconStyle={{ borderWidth: 15, borderColor: LightenDarkenColor(item.get('color'), -30) }}
                                                                        textStyle={{ fontFamily: "JosefinSans-Regular" }}
                                                                        onPress={() => { }}
                                                                        style={{ flex: 0.5 }}
                                                                    />
                                                                </View>
                                                                <View style={{ padding: 10, borderWidth: 1, borderRadius: 10, marginVertical: 5, flexDirection: 'row', backgroundColor: LightenDarkenColor(item.get('color'), -30), borderColor: LightenDarkenColor(item.get('color'), -30), elevation: 5, justifyContent: 'space-between', width: '80%' }}>
                                                                    <View style={{ justifyContent: 'center' }}>
                                                                        <Text style={{ fontSize: 18, paddingRight: 5, color: colors.lightText }}>{step.stepName}</Text>
                                                                    </View>
                                                                    {step.stepTime !== '' ?
                                                                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                                                                            <FontAwesomeIcon icon={faStopwatch} style={{ marginHorizontal: 5 }} size={20} color={'white'} />
                                                                            <Text style={{ fontSize: 18, color: colors.lightText }}>{step.stepTime}</Text>
                                                                        </View>
                                                                        : null}
                                                                </View>
                                                            </View>
                                                        ))}
                                                    </AccordionItem>
                                                </TouchableOpacity>
                                                : <TouchableOpacity
                                                    onLongPress={() => editModal(item)}
                                                    style={{ flex: 7, padding: '3%', borderWidth: 1, marginVertical: 5, marginHorizontal: 15, backgroundColor: item.get('color'), borderRadius: 10, borderColor: item.get('color'), elevation: 5, flexDirection: 'row' }}>
                                                    <Text style={{ fontSize: 22, marginRight: 10, color: colors.lightText }}>{item.get('emoji')}</Text>
                                                    <View>
                                                        <Text style={{ fontSize: 18, paddingRight: 5, color: colors.lightText }}>{item.get('name')}</Text>
                                                        <Text style={{ marginHorizontal: 1, fontSize: 14, color: colors.lightText }}>{item.get('startTime')} - {item.get('endTime')}</Text>
                                                    </View>
                                                </TouchableOpacity>
                                            }
                                        </View>
                                    ))}
                                </View>
                            </View>
                    }
                </View>
            );
        } else {
            return (
                <View>
                    {
                        dayTasksArray.length == 0 && allDayArray.length == 0 ?
                            <View style={{ marginHorizontal: 15, alignItems: 'center', marginVertical: '25%' }}>
                                <Text style={{ textAlign: 'center', fontSize: 18, color: colors.darkText }}>Der er ingen opgaver eller begivenheder i din kalender i dag!</Text>
                            </View>
                            :
                            <View>
                                <View>
                                    {allDayArray.map((item, index) => (
                                        <TouchableOpacity
                                            onLongPress={() => editModal(item)}
                                            key={index}
                                            style={{ alignItems: 'center', borderWidth: 1, padding: 5, marginVertical: 5, marginHorizontal: 15, flexDirection: 'row', backgroundColor: item.get('color'), borderRadius: 10, borderColor: item.get('color'), }}>
                                            <Text style={{ fontSize: 20, marginRight: 10, marginLeft: 2, color: colors.lightText }}>{item.get('emoji')}</Text>
                                            <Text style={{ fontSize: 18, paddingRight: 5, color: colors.lightText }}>{item.get('name')}</Text>
                                        </TouchableOpacity>
                                    ))}
                                </View>
                                {tasksArray.length == 0 ?
                                    null
                                    : <View>
                                        <View style={{ borderWidth: 1, marginHorizontal: 15, marginVertical: '2%', backgroundColor: colors.dark, width: 250, alignSelf: 'center', borderColor: colors.dark, borderRadius: 10 }}></View>
                                        <Text style={{ fontSize: 16, marginLeft: '2%', textAlign: 'center', marginTop: '5%' }}>To-do's</Text>
                                        {tasksArray.map((item, index) => (
                                            <View key={index} style={{ flexDirection: 'row', marginBottom: '5%' }}>
                                                <BouncyCheckbox
                                                    size={30}
                                                    fillColor={colors.dark}
                                                    unfillColor={colors.dark}
                                                    iconStyle={{ elevation: 5, }}
                                                    innerIconStyle={{ borderWidth: 15, borderColor: item.get('color') }}
                                                    textStyle={{ fontFamily: "JosefinSans-Regular" }}
                                                    onPress={() => { completeTask(item) }}
                                                    isChecked={item.get('completed')}
                                                    style={{ marginHorizontal: 10, flex: 0.5 }}
                                                />
                                                <TouchableOpacity
                                                    onLongPress={() => editModal(item)}
                                                    style={{ flex: 7, padding: '3%', borderWidth: 1, marginVertical: 5, marginHorizontal: 15, backgroundColor: item.get('color'), borderRadius: 10, borderColor: item.get('color'), elevation: 5, flexDirection: 'row' }}>
                                                    <Text style={{ fontSize: 22, marginRight: 10, color: colors.lightText }}>{item.get('emoji')}</Text>
                                                    <View>
                                                        <Text style={{ fontSize: 18, paddingRight: 5, color: colors.lightText }}>{item.get('name')}</Text>
                                                        <Text style={{ marginHorizontal: 1, fontSize: 14, color: colors.lightText }}>{item.get('startTime')} - {item.get('endTime')}</Text>
                                                    </View>
                                                </TouchableOpacity>
                                            </View>
                                        ))}
                                    </View>
                                }
                                {eventsArray.length == 0 ?
                                    null
                                    : <View>
                                        <Text style={{ fontSize: 16, marginLeft: '2%', textAlign: 'center', marginTop: '5%' }}>Begivenheder</Text>
                                        {eventsArray.map((item, index) => (
                                            <TouchableOpacity
                                                onLongPress={() => editModal(item)}
                                                key={index}
                                                style={{ marginLeft: '15%', flex: 7, padding: '3%', borderWidth: 1, marginVertical: 5, marginHorizontal: 15, backgroundColor: item.get('color'), borderRadius: 10, borderColor: item.get('color'), elevation: 5, flexDirection: 'row' }}>
                                                <Text style={{ fontSize: 22, marginRight: 10, color: colors.lightText }}>{item.get('emoji')}</Text>
                                                <View>
                                                    <Text style={{ fontSize: 18, paddingRight: 5, color: colors.lightText }}>{item.get('name')}</Text>
                                                    <Text style={{ marginHorizontal: 1, fontSize: 14, color: colors.lightText }}>{item.get('startTime')} - {item.get('endTime')}</Text>
                                                </View>
                                            </TouchableOpacity>
                                        ))}
                                    </View>
                                }
                                {routinesArray.length == 0 ?
                                    null
                                    : <View>
                                        <Text style={{ fontSize: 16, marginLeft: '2%', textAlign: 'center', marginTop: '5%' }}>Rutiner</Text>
                                        {routinesArray.map((item, index) => (
                                            <TouchableOpacity
                                                onLongPress={() => editModal(item)}
                                                key={index}
                                                style={{ marginLeft: '15%', flex: 1, alignItems: 'center', borderWidth: 1, marginVertical: 5, marginHorizontal: 15, flexDirection: 'row', backgroundColor: item.get('color'), borderRadius: 10, borderColor: item.get('color'), elevation: 5 }}>
                                                <AccordionItem
                                                    title={item.get('name')}
                                                    time={item.get('startTime') + ' - ' + item.get('endTime')}
                                                    icon={null}
                                                    emoji={item.get('emoji')}
                                                    titleStyle={{ fontSize: 18, color: 'black', fontWeight: 'normal' }}
                                                    emojiStyle={{ fontSize: 22 }}
                                                    toggleStyle={'black'}>
                                                    {item.get('routineSteps').map((step, index) => (
                                                        <View key={index} style={{ flexDirection: 'row', }}>
                                                            <View style={{ justifyContent: 'center' }}>
                                                                <BouncyCheckbox
                                                                    size={40}
                                                                    fillColor={LightenDarkenColor(item.get('color'), -30)}
                                                                    unfillColor={colors.dark}
                                                                    iconStyle={{ elevation: 5, }}
                                                                    innerIconStyle={{ borderWidth: 20, borderColor: LightenDarkenColor(item.get('color'), -30) }}
                                                                    textStyle={{ fontFamily: "JosefinSans-Regular" }}
                                                                    style={{ flex: 0.5 }}
                                                                />
                                                            </View>
                                                            <View style={{ padding: 10, borderWidth: 1, borderRadius: 10, marginVertical: 5, flexDirection: 'row', backgroundColor: LightenDarkenColor(item.get('color'), -30), borderColor: LightenDarkenColor(item.get('color'), -30), elevation: 5, justifyContent: 'space-between', width: '80%' }}>
                                                                <View style={{ justifyContent: 'center' }}>
                                                                    <Text style={{ fontSize: 18, paddingRight: 5, color: colors.lightText }}>{step.stepName}</Text>
                                                                </View>
                                                                {step.stepTime !== '' ?
                                                                    <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                                                                        <FontAwesomeIcon icon={faStopwatch} style={{ marginHorizontal: 5 }} size={20} color={'white'} />
                                                                        <Text style={{ fontSize: 18, color: colors.lightText }}>{step.stepTime}</Text>
                                                                    </View>
                                                                    : <Text></Text>}
                                                            </View>
                                                        </View>
                                                    ))}
                                                </AccordionItem>
                                            </TouchableOpacity>
                                        ))}
                                    </View>}
                            </View>
                    }
                </View>
            );
        }
    }

    return (
        <SafeAreaView style={{ marginHorizontal: '5%', marginBottom: '2%' }}>
            <View style={{ alignItems: 'center', marginVertical: 10, flexDirection: 'row', justifyContent: 'space-between' }}>
                <Text style={{ fontSize: 24, color: colors.darkText }}>Dagens planer</Text>
                <DropDownPicker
                    open={open}
                    value={sorting}
                    items={sortingOptions}
                    setOpen={setOpen}
                    setValue={setSorting}
                    setItems={setSortingOptions}
                    placeholder={
                        <FontAwesomeIcon icon={faFilter} size={20} color={colors.dark} />}
                    style={{ borderColor: colors.dark, elevation: 5 }}
                    containerStyle={{
                        width: '35%',

                    }}
                    textStyle={{ fontSize: 14 }}
                />

            </View>
            <View >
                {sortEventView()}
            </View>
            <Modal
                isVisible={editModalVisible}
                onBackdropPress={() => setEditModalVisible(false)}>
                <View
                    style={{
                        backgroundColor: colors.background,
                        padding: 10,
                        borderWidth: 1,
                        borderColor: colors.background,
                        borderTopRightRadius: 10,
                        borderTopLeftRadius: 10,
                    }}>
                    <ScrollView>
                        <Text>
                            Rediger din

                        </Text>
                        <View
                            style={{
                                alignContent: 'center',
                                paddingHorizontal: 16,
                            }}>
                            <View>
                                <Text style={[styles.text, { color: colors.text }]}>
                                    Hvad skal din to-do hedde?
                                </Text>
                                <TextInput
                                    style={styles.textInput}
                                    onChangeText={text => setItemName(text)}
                                    value={itemName}
                                />
                            </View>
                            <View>
                                <Text style={[styles.text, { color: colors.text }]}>
                                    VÃ¦lg en farve
                                </Text>
                                <View style={styles.colorOptions}>
                                    <TouchableOpacity
                                        style={{
                                            borderWidth: itemColor === '#FAEDCB' ? 1.5 : 1,
                                            borderRadius:
                                                itemColor === '#FAEDCB'
                                                    ? 30 * scaleFactor
                                                    : 20 * scaleFactor,
                                            width:
                                                itemColor === '#FAEDCB'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            height:
                                                itemColor === '#FAEDCB'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            backgroundColor: '#FAEDCB',
                                            borderColor: itemColor === '#FAEDCB'
                                                ? 'grey'
                                                : '#FAEDCB',
                                            elevation: 5,
                                            shadowColor: 'black',
                                            shadowOpacity: 0.5,
                                            shadowOffset: { width: 0, height: 2 },
                                            shadowRadius: 2,
                                        }}
                                        onPress={() => handleColorPick('#FAEDCB')}></TouchableOpacity>
                                    <TouchableOpacity
                                        style={{
                                            borderWidth: itemColor === '#C9E4DE' ? 1.5 : 1,
                                            borderRadius:
                                                itemColor === '#C9E4DE'
                                                    ? 30 * scaleFactor
                                                    : 20 * scaleFactor,
                                            width:
                                                itemColor === '#C9E4DE'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            height:
                                                itemColor === '#C9E4DE'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            backgroundColor: '#C9E4DE',
                                            borderColor: itemColor === '#C9E4DE'
                                                ? 'grey'
                                                : '#C9E4DE',
                                            elevation: 5,
                                            shadowColor: 'grey',
                                            shadowOffset: { width: 1, height: 2 },
                                            shadowOpacity: 0.8,
                                            shadowRadius: 1,
                                        }}
                                        onPress={() => handleColorPick('#C9E4DE')}></TouchableOpacity>
                                    <TouchableOpacity
                                        style={{
                                            borderWidth: itemColor === '#C6DEF1' ? 1.5 : 1,
                                            borderRadius:
                                                itemColor === '#C6DEF1'
                                                    ? 30 * scaleFactor
                                                    : 20 * scaleFactor,
                                            width:
                                                itemColor === '#C6DEF1'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            height:
                                                itemColor === '#C6DEF1'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            backgroundColor: '#C6DEF1',
                                            borderColor: itemColor === '#C6DEF1'
                                                ? 'grey'
                                                : '#C6DEF1',
                                            elevation: 5,
                                            shadowColor: 'black',
                                            shadowOpacity: 0.5,
                                            shadowOffset: { width: 0, height: 2 },
                                            shadowRadius: 2,
                                        }}
                                        onPress={() => handleColorPick('#C6DEF1')}></TouchableOpacity>
                                    <TouchableOpacity
                                        style={{
                                            borderWidth: itemColor === '#DBCDF0' ? 1.5 : 1,
                                            borderRadius:
                                                itemColor === '#DBCDF0'
                                                    ? 30 * scaleFactor
                                                    : 20 * scaleFactor,
                                            width:
                                                itemColor === '#DBCDF0'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            height:
                                                itemColor === '#DBCDF0'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            backgroundColor: '#DBCDF0',
                                            borderColor: itemColor === '#DBCDF0'
                                                ? 'grey'
                                                : '#DBCDF0',
                                            elevation: 5,
                                            shadowColor: 'black',
                                            shadowOpacity: 0.5,
                                            shadowOffset: { width: 0, height: 2 },
                                            shadowRadius: 2,
                                        }}
                                        onPress={() => handleColorPick('#DBCDF0')}></TouchableOpacity>
                                    <TouchableOpacity
                                        style={{
                                            borderWidth: itemColor === '#FFADAD' ? 1.5 : 1,
                                            borderRadius:
                                                itemColor === '#FFADAD'
                                                    ? 30 * scaleFactor
                                                    : 20 * scaleFactor,
                                            width:
                                                itemColor === '#FFADAD'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            height:
                                                itemColor === '#FFADAD'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            backgroundColor: '#FFADAD',
                                            borderColor: itemColor === '#FFADAD'
                                                ? 'grey'
                                                : '#FFADAD',
                                            elevation: 5,
                                            shadowColor: 'black',
                                            shadowOpacity: 0.5,
                                            shadowOffset: { width: 0, height: 2 },
                                            shadowRadius: 2,
                                        }}
                                        onPress={() => handleColorPick('#FFADAD')}></TouchableOpacity>
                                    <TouchableOpacity
                                        style={{
                                            borderWidth: itemColor === '#FFD6A5' ? 1.5 : 1,
                                            borderRadius:
                                                itemColor === '#FFD6A5'
                                                    ? 30 * scaleFactor
                                                    : 20 * scaleFactor,
                                            width:
                                                itemColor === '#FFD6A5'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            height:
                                                itemColor === '#FFD6A5'
                                                    ? 45 * scaleFactor
                                                    : 40 * scaleFactor,
                                            backgroundColor: '#FFD6A5',
                                            borderColor: itemColor === '#FFD6A5'
                                                ? 'grey'
                                                : '#FFD6A5',
                                            elevation: 5,
                                            shadowColor: 'black',
                                            shadowOpacity: 0.5,
                                            shadowOffset: { width: 0, height: 2 },
                                            shadowRadius: 2,
                                        }}
                                        onPress={() => handleColorPick('#FFD6A5')}></TouchableOpacity>
                                </View>
                            </View>
                            <View style={{ marginTop: '10%', flexDirection: 'row' }}>
                                <View style={styles.rowView}>
                                    <TouchableOpacity
                                        onPress={() => setEmojiModalVisible(true)}
                                        style={[
                                            styles.buttonSmall,
                                            {
                                                backgroundColor: colors.subButton,
                                                borderColor: colors.subButton,
                                            },
                                        ]}>
                                        <Text
                                            style={[
                                                styles.buttonText,
                                                { fontSize: 20 * scaleFactor },
                                                { color: colors.text },
                                            ]}>
                                            Emoji
                                        </Text>
                                    </TouchableOpacity>
                                    <Modal
                                        visible={emojiModalVisible}
                                        animationType="slide"
                                        transparent={true}
                                        onRequestClose={() => setEmojiModalVisible(false)}>
                                        <View style={styles.modalContainer}>
                                            <View
                                                style={[
                                                    styles.emojiPickerContainer,
                                                    { backgroundColor: colors.background },
                                                ]}>
                                                <EmojiPicker
                                                    emojis={emojis}
                                                    recent={recent}
                                                    loading={false}
                                                    darkMode={false}
                                                    perLine={6}
                                                    onSelect={chosenEmoji => {
                                                        console.log(chosenEmoji);
                                                        setEmoji(chosenEmoji.emoji);
                                                        setEmojiModalVisible(false)
                                                    }}
                                                    onChangeRecent={setRecent}
                                                    backgroundColor={colors.background}
                                                />
                                            </View>
                                            <TouchableOpacity
                                                style={[
                                                    styles.modalButton,
                                                    {
                                                        backgroundColor: colors.mainButton,
                                                        borderColor: colors.mainButton,
                                                    },
                                                ]}
                                                onPress={() => setEmojiModalVisible(false)}>
                                                <Text style={{ fontWeight: 'bold', fontSize: 24 }}>LUK</Text>
                                            </TouchableOpacity>
                                        </View>
                                    </Modal>
                                </View>
                                <View style={[styles.rowView, { alignItems: 'center', }]}>
                                    <Text style={{ fontSize: 26, color: colors.text }}> {emoji}</Text>
                                </View>
                            </View>
                            <View style={{ flexDirection: 'row', marginVertical: '2%' }}>
                                <View style={styles.rowView}>
                                    <TouchableOpacity
                                        style={[
                                            styles.buttonSmall,
                                            {
                                                backgroundColor: colors.subButton,
                                                borderColor: colors.subButton,
                                            },
                                        ]}
                                        onPress={() => showDatePicker()}>
                                        <Text
                                            style={[
                                                styles.buttonText,
                                                { fontSize: 20 * scaleFactor },
                                                { color: colors.darkText },
                                            ]}>
                                            Dato
                                        </Text>
                                    </TouchableOpacity>
                                    <DatePicker
                                        mode="date"
                                        modal
                                        open={isDatePickerVisible}
                                        date={today}
                                        onConfirm={(date) => {
                                            setDatePickerVisibility(false)
                                            handleDateConfirm(date)
                                        }}
                                        onCancel={() => {
                                            setDatePickerVisibility(false)
                                        }}
                                    />
                                </View>
                                <View style={[styles.rowView, { alignItems: 'center' }]}>
                                    <Text
                                        style={[
                                            styles.text,
                                            { fontWeight: 'bold', fontSize: 18 * scaleFactor },
                                            { color: colors.darkText },
                                        ]}>
                                        {`${itemDate}`}
                                    </Text>
                                </View>
                            </View>
                            <View style={{ flexDirection: 'row', marginVertical: 2 }}>
                                <View style={styles.rowView}>
                                    <TouchableOpacity
                                        style={[
                                            styles.buttonSmall,
                                            {
                                                backgroundColor: colors.middle,
                                                borderColor: colors.middleShadow,
                                            },
                                        ]}
                                        onPress={() => setStartTimePickerVisibility(true)}>
                                        <Text style={[styles.buttonText, { color: colors.darkText }]}>
                                            Start tidspunkt
                                        </Text>
                                    </TouchableOpacity>
                                    <DatePicker
                                        mode="time"
                                        modal
                                        open={isStartTimePickerVisible}
                                        date={today}
                                        title={'Start tid'}
                                        confirmText="BekrÃ¦ft"
                                        cancelText="Annuler"
                                        buttonColor={colors.dark}
                                        dividerColor={colors.dark}
                                        onConfirm={(date) => {
                                            setStartTimePickerVisibility(false)
                                            handleStartTimeConfirm(date)
                                            setEndTimePickerVisibility(true)
                                        }}
                                        onCancel={() => {
                                            setStartTimePickerVisibility(false)
                                        }}
                                    />
                                </View>
                                <View style={[styles.rowView, { alignItems: 'center' }]}>
                                    <Text style={[styles.text, { fontWeight: 'bold', color: colors.darkText }]}>
                                        {itemStartTime == '' ? '' : `${itemStartTime}`}
                                    </Text>
                                </View>
                            </View>
                            <View style={{ flexDirection: 'row', marginVertical: 2 }}>
                                <View style={styles.rowView}>
                                    <TouchableOpacity
                                        style={[
                                            styles.buttonSmall,
                                            {
                                                backgroundColor: colors.middle,
                                                borderColor: colors.middleShadow,
                                            },
                                        ]}
                                        onPress={() => setEndTimePickerVisibility(true)}>
                                        <Text style={[styles.buttonText, { color: colors.darkText }]}>
                                            Slut tidspunkt
                                        </Text>
                                    </TouchableOpacity>
                                    <DatePicker
                                        mode="time"
                                        modal
                                        open={isEndTimePickerVisible}
                                        date={today}
                                        title={'Slut tid'}
                                        confirmText="BekrÃ¦ft"
                                        cancelText="Annuler"
                                        buttonColor={colors.dark}
                                        dividerColor={colors.dark}
                                        onConfirm={(date) => {
                                            setEndTimePickerVisibility(false)
                                            handleEndTimeConfirm(date)
                                            setDatePickerVisibility(true)
                                        }}
                                        onCancel={() => {
                                            setEndTimePickerVisibility(false)
                                        }}
                                    />
                                </View>
                                <View style={[styles.rowView, { alignItems: 'center' }]}>
                                    <Text style={[styles.text, { fontWeight: 'bold', color: colors.darkText }]}>
                                        {itemEndTime == '' ? '' : `${itemEndTime}`}
                                    </Text>
                                </View>
                            </View>
                        </View>
                        <View
                            style={{
                                alignContent: 'center',
                                paddingHorizontal: 16,
                            }}>
                            <Text style={[styles.text, { color: colors.darkText }]}>
                                TilfÃ¸j en beskrivelse
                            </Text>
                            <TextInput
                                style={styles.textInput}
                                onChangeText={text => setDescription(text)}
                                value={description}
                                multiline={true}
                                numberOfLines={8}
                                textAlignVertical={'top'}></TextInput>
                        </View>
                    </ScrollView>
                </View>
                <TouchableOpacity
                    style={{
                        backgroundColor: colors.dark,
                        padding: 5,
                        alignItems: 'center',
                        flexDirection: 'row',
                        justifyContent: 'center',
                        borderWidth: 1,
                        borderColor: colors.darkShadow,
                        borderBottomRightRadius: 10,
                        borderBottomLeftRadius: 10,
                    }}
                    onPress={() => edit()}>
                    <Text style={{ fontSize: 26 * scaleFactor, color: colors.darkText }}>
                        Gem Ã¦ndringer
                    </Text>
                </TouchableOpacity>
            </Modal>
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    menuOptionStyle: {
        padding: 10,
        marginVertical: 5,
        borderWidth: 1,
        borderRadius: 10,
        elevation: 10,
        flexDirection: 'row'
    },
    menuOptionsContainer: {
        backgroundColor: 'transparent',
        padding: 5,
        borderRadius: 10,
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 0,
        },
        shadowOpacity: 0,
        shadowRadius: 0,
        elevation: 0,
    },
    calendar: {
        padding: 20,
        marginVertical: 20,
        borderWidth: 1,
        marginHorizontal: 5,
        borderRadius: 10,
        borderColor: 'white',
    },
    calendarTheme: {
        textSectionTitleColor: 'white',
    },
    dropdown: {
        zIndex: 5000,
        elevation: 1000,
    },
    menuOptionStyle: {
        zIndex: 1,
    },
    Button: {
        borderRadius: 10,
        padding: 5,
        alignSelf: 'center',
        justifyContent: 'center',
        alignItems: 'center',
        flexDirection: 'row',
        borderWidth: 1,
        marginVertical: '4%',
        paddingHorizontal: '3%',
        elevation: 5,
        shadowColor: 'black',
        shadowOpacity: 0.5,
        shadowOffset: { width: 0, height: 2 },
        shadowRadius: 2,
    },
    buttonSmall: {
        justifyContent: 'center',
        padding: '2%',
        alignItems: 'center',
        borderWidth: 1,
        borderRadius: 10,
        elevation: 5,
        shadowColor: 'black',
        shadowOpacity: 0.5,
        shadowOffset: { width: 0, height: 2 },
        shadowRadius: 2,
        marginBottom: 8,
    },
    modalButton: {
        backgroundColor: 'lightgrey',
        width: '95%',
        height: '8%',
        justifyContent: 'center',
        alignItems: 'center',
        borderWidth: 1,
        borderBottomRightRadius: 20,
        borderBottomLeftRadius: 20,
    },
    buttonText: {
        color: 'black',
        fontSize: 20,
        textAlign: 'center',
    },
    modalContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        padding: 20,
        borderWidth: 1,
        borderRadius: 20,
    },
    emojiPickerContainer: {
        backgroundColor: 'white',
        borderTopLeftRadius: 20,
        borderTopRightRadius: 20,
        padding: 10,
        width: '95%',
        height: '95%',
    },
    text: {
        marginVertical: 10,
        fontSize: 18,
    },
    textInput: {
        padding: 8,
        backgroundColor: 'white',
        borderWidth: 1,
        borderRadius: 10,
        fontSize: 16,
        borderColor: 'white',
        elevation: 5,
        shadowColor: 'black',
        shadowOpacity: 0.5,
        shadowOffset: { width: 0, height: 2 },
        shadowRadius: 2,
    },
    border: {
        borderWidth: 1,
        width: 300,
        alignSelf: 'center',
        marginTop: 10,
        borderRadius: 10,
    },
    colorOptions: {
        flexDirection: 'row',
        justifyContent: 'space-evenly',
    },
    rowView: {
        flex: 1,
    },
});

export default TaskSorter;